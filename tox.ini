[tox]
envlist =
    py27, py34, py35, py36,
    mypy-py2, mypy-py3,
    bandit, doc8, readme,
    flake8, pylint,
    flake8-tests, pylint-tests

# Additional environments:
# vulture :: Runs vulture. Prone to false-positives.
# linters :: Runs all linters over all source code.
# linters-tests :: Runs all linters over all tests.

# Additional environments:
# docs :: Builds Sphinx documentation.
# serve-docs :: Starts local webserver to serve built documentation.
# park :: Builds name-parking packages using pypi-parker.
# build :: Builds source and wheel dist files.
# test-release :: Builds dist files and uploads to testpypi pypirc profile.
# release :: Builds dist files and uploads to pypi pypirc profile.

[testenv]
passenv = AWS_ENCRYPTION_SDK_PYTHON_INTEGRATION_TEST_CONTROL
sitepackages = False
deps =
    mock
    pytest
    pytest-catchlog
    pytest-cov
    pytest-mock
    coverage
commands =
    coverage run -m pytest \
        --cov aws_encryption_sdk_cli \
        {posargs}

# mypy
[testenv:mypy-py3]
basepython = python3
deps =
    coverage
    mypy
commands =
    python -m mypy \
        --linecoverage-report build \
        src/aws_encryption_sdk_cli/
    # Make mypy linecoverage report readable by coverage
    python -c \
        "t = open('.coverage', 'w');\
        c = open('build/coverage.json').read();\
        t.write('!coverage.py: This is a private format, don\'t read it directly!\n');\
        t.write(c);\
        t.close()"
    coverage report -m

[testenv:mypy-py2]
basepython = python3
deps =
    coverage
    mypy
commands =
    python -m mypy \
        --py2 \
        --linecoverage-report build \
        src/aws_encryption_sdk_cli/
    # Make mypy linecoverage report readable by coverage
    python -c \
        "t = open('.coverage', 'w');\
        c = open('build/coverage.json').read();\
        t.write('!coverage.py: This is a private format, don\'t read it directly!\n');\
        t.write(c);\
        t.close()"
    coverage report -m

# Linters
[testenv:flake8]
basepython = python3
deps =
    flake8
    flake8-docstrings
    flake8-import-order
commands =
    flake8 \
        src/aws_encryption_sdk_cli/ \
        setup.py \
        doc/conf.py

[testenv:flake8-tests]
basepython = {[testenv:flake8]basepython}
deps = {[testenv:flake8]deps}
commands =
    flake8 \
        # Ignore F811 redefinition errors in tests (breaks with pytest-mock use)
        # Ignore D103 docstring requirements for tests
        --ignore F811,D103 \
        test/

[testenv:pylint]
basepython = python3
deps =
    {[testenv]deps}
    pyflakes
    pylint
commands =
    pylint \
        --rcfile=src/pylintrc \
        src/aws_encryption_sdk_cli/  \
        setup.py \
        doc/conf.py

[testenv:pylint-tests]
basepython = {[testenv:pylint]basepython}
deps = {[testenv:pylint]deps}
commands =
    pylint \
        --rcfile=test/pylintrc \
        test/unit/

[testenv:doc8]
basepython = python3
deps =
    sphinx
    doc8
commands = doc8 doc/index.rst test/integration/README.rst README.rst CHANGELOG.rst CONTRIBUTING.rst

[testenv:readme]
basepython = python3
deps = readme_renderer
commands = python setup.py check -r -s

[testenv:bandit]
basepython = python3
deps = bandit
commands = bandit -r src/aws_encryption_sdk_cli/

# Prone to false positives: only run independently
[testenv:vulture]
basepython = python3
deps = vulture
commands = vulture src/aws_encryption_sdk_cli/

[testenv:linters]
basepython = python3
deps =
    {[testenv:flake8]deps}
    {[testenv:pylint]deps}
    {[testenv:doc8]deps}
    {[testenv:readme]deps}
    {[testenv:bandit]deps}
commands =
    {[testenv:flake8]commands}
    {[testenv:pylint]commands}
    {[testenv:doc8]commands}
    {[testenv:readme]commands}
    {[testenv:bandit]commands}

[testenv:linters-tests]
basepython = python3
deps =
    {[testenv:flake8-tests]deps}
    {[testenv:pylint-tests]deps}
commands =
    {[testenv:flake8-tests]commands}
    {[testenv:pylint-tests]commands}

# Documentation
[testenv:docs]
basepython = python3
deps = -rdoc/requirements.txt
commands =
    sphinx-build -E -c doc/ -b html doc/ doc/build/html

[testenv:serve-docs]
basepython = python3
skip_install = true
changedir = doc/build/html
deps =
commands =
    python -m http.server {posargs}

# Release tooling
[testenv:park]
basepython = python3.6
skip_install = true
deps =
    pypi-parker
    setuptools
commands = python setup.py park

[testenv:build]
basepython = python3
skip_install = true
deps =
    wheel
    setuptools
commands =
    python setup.py sdist bdist_wheel

[testenv:test-release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository testpypi dist/*

[testenv:release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository pypi dist/*

# Flake8 Configuration
[flake8]
max_complexity = 10
max_line_length = 120
import_order_style = google
application_import_names = aws_encryption_sdk_cli
builtins = raw_input
ignore =
    # Ignoring D205 and D400 because of false positives
    D205, D400,
    # Ignoring D401 pending discussion of imperative mood
    D401

# Doc8 Configuration
[doc8]
max-line-length = 120