[tox]
envlist =
    py{27,34,35,36,37}-{local,integ},
    mypy-py{2,3},
    bandit, doc8, readme, docs,
    flake8, pylint,
    flake8-tests, pylint-tests,
    isort-check, black-check

# Additional test environments:
# vulture :: Runs vulture. Prone to false-positives.
# linters :: Runs all linters over all source code.
# linters-tests :: Runs all linters over all tests.

# Autoformatter helper environments:
# black-check : Check for "black" issues
# blacken : Fix all "black" issues
# isort-seed : Generate a known_third_party list for isort.
#   NOTE: generates in .isort.cfg; move to isort section in setup.cfg
#   NOTE: currently it incorrectly identifies this library too; make sure you remove it
# isort-check : Check for isort issues
# isort : Fix isort issues

# Operational helper environments:
# docs :: Builds Sphinx documentation.
# serve-docs :: Starts local webserver to serve built documentation.
# park :: Builds name-parking packages using pypi-parker.
# build :: Builds source and wheel dist files.
# test-release :: Builds dist files and uploads to testpypi pypirc profile.
# release :: Builds dist files and uploads to pypi pypirc profile.

[testenv]
passenv = 
    # Identifies AWS KMS key id to use in integration tests
    AWS_ENCRYPTION_SDK_PYTHON_INTEGRATION_TEST_AWS_KMS_KEY_ID \
    # Pass through AWS credentials
    AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \
    # Pass through AWS profile name (useful for local testing)
    AWS_PROFILE
sitepackages = False
deps =
    mock
    pytest>=3.3.1
    pytest-cov
    pytest-mock
commands =
    local: pytest --cov aws_encryption_sdk_cli -m local -l {posargs}
    integ: pytest --cov aws_encryption_sdk_cli -m integ -l {posargs}
    all: pytest --cov aws_encryption_sdk_cli -l {posargs}

# mypy
[testenv:mypy-coverage]
commands =
    # Make mypy linecoverage report readable by coverage
    python -c \
        "t = open('.coverage', 'w');\
        c = open('build/coverage.json').read();\
        t.write('!coverage.py: This is a private format, don\'t read it directly!\n');\
        t.write(c);\
        t.close()"
    coverage report -m

[testenv:mypy-common]
basepython = python3
deps =
    coverage~=4.0
    mypy<=0.560
    mypy_extensions
    typing>=3.6.2

[testenv:mypy-py3]
basepython = {[testenv:mypy-common]basepython}
deps = {[testenv:mypy-common]deps}
commands =
    python -m mypy \
        --linecoverage-report build \
        src/aws_encryption_sdk_cli/ \
        {posargs}
    {[testenv:mypy-coverage]commands}

[testenv:mypy-py2]
basepython = {[testenv:mypy-common]basepython}
deps = {[testenv:mypy-common]deps}
commands =
    python -m mypy \
        --py2 \
        --linecoverage-report build \
        src/aws_encryption_sdk_cli/ \
        {posargs}
    {[testenv:mypy-coverage]commands}

# Linters
[testenv:flake8]
basepython = python3
deps =
    flake8
    flake8-docstrings
    flake8-print>=3.0.1
commands =
    flake8 \
        src/aws_encryption_sdk_cli/ \
        setup.py \
        doc/conf.py \
        {posargs}

[testenv:flake8-tests]
basepython = {[testenv:flake8]basepython}
deps = {[testenv:flake8]deps}
commands =
    flake8 \
        # Ignore F811 redefinition errors in tests (breaks with pytest-mock use)
        # Ignore D103 docstring requirements for tests
        # Ignore D401 imperative mood for module docstrings (was hanging up on integration_test_utils)
        # E203 is not PEP8 compliant https://github.com/ambv/black#slices
        # W503 is not PEP8 compliant https://github.com/ambv/black#line-breaks--binary-operators
        --ignore F811,D103,D401,E203,W503 \
        test/ \
        {posargs}

[testenv:blacken-src]
basepython = python3
deps =
    black
commands =
    black --line-length 120 \
        src/aws_encryption_sdk_cli/ \
        setup.py \
        doc/conf.py \
        test/ \
        {posargs}


[testenv:blacken]
basepython = python3
deps =
    {[testenv:blacken-src]deps}
commands =
    {[testenv:blacken-src]commands}

[testenv:black-check]
basepython = python3
deps =
    {[testenv:blacken]deps}
commands =
    {[testenv:blacken-src]commands} --diff

[testenv:isort-seed]
basepython = python3
deps = seed-isort-config
commands = seed-isort-config

[testenv:isort]
basepython = python3
deps = isort
commands = isort -rc \
    src \
    test \
    doc \
    setup.py \
    {posargs}

[testenv:isort-check]
basepython = python3
deps = {[testenv:isort]deps}
commands = {[testenv:isort]commands} -c

[testenv:pylint]
basepython = python3
deps =
    {[testenv]deps}
    pyflakes
    pylint
commands =
    pylint \
        --rcfile=src/pylintrc \
        src/aws_encryption_sdk_cli/  \
        setup.py \
        doc/conf.py \
        {posargs}

[testenv:pylint-tests]
basepython = {[testenv:pylint]basepython}
deps = {[testenv:pylint]deps}
commands =
    pylint \
        --rcfile=test/pylintrc \
        test/unit/ \
        test/integration/ \
        {posargs}

[testenv:doc8]
basepython = python3
deps =
    sphinx
    doc8
commands = doc8 doc/index.rst test/integration/README.rst README.rst CHANGELOG.rst

[testenv:readme]
basepython = python3
deps = readme_renderer
commands = python setup.py check -r -s

[testenv:bandit]
basepython = python3
deps = bandit
commands = bandit -r src/aws_encryption_sdk_cli/

# Prone to false positives: only run independently
[testenv:vulture]
basepython = python3
deps = vulture
commands = vulture src/aws_encryption_sdk_cli/

[testenv:linters]
basepython = python3
deps =
    {[testenv:flake8]deps}
    {[testenv:pylint]deps}
    {[testenv:doc8]deps}
    {[testenv:readme]deps}
    {[testenv:bandit]deps}
commands =
    {[testenv:flake8]commands}
    {[testenv:pylint]commands}
    {[testenv:doc8]commands}
    {[testenv:readme]commands}
    {[testenv:bandit]commands}

[testenv:linters-tests]
basepython = python3
deps =
    {[testenv:flake8-tests]deps}
    {[testenv:pylint-tests]deps}
commands =
    {[testenv:flake8-tests]commands}
    {[testenv:pylint-tests]commands}

# Documentation
[testenv:docs]
basepython = python3
deps = -rdoc/requirements.txt
commands =
    sphinx-build -E -c doc/ -b html doc/ doc/build/html

[testenv:serve-docs]
basepython = python3
skip_install = true
changedir = doc/build/html
deps =
commands =
    python -m http.server {posargs}

# Release tooling
[testenv:park]
basepython = python3.6
skip_install = true
deps =
    pypi-parker
    setuptools
commands = python setup.py park

[testenv:build]
basepython = python3
skip_install = true
deps =
    {[testenv:docs]deps}
    wheel
    setuptools
commands =
    {[testenv:docs]commands}
    python setup.py sdist bdist_wheel

[testenv:test-release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository testpypi dist/*

[testenv:release]
basepython = python3
skip_install = true
deps =
    {[testenv:build]deps}
    twine
commands =
    {[testenv:build]commands}
    twine upload --skip-existing --repository pypi dist/*
