# This workflow runs tests on pull requests.
name: venv-tests

on:
  pull_request:
  push:
  # Run once a day
  schedule:
    - cron: '0 0 * * *'

jobs:
  tests:
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: true
      matrix:
        platform:
          - os: ubuntu-latest
            architecture: x64
          - os: windows-latest
            architecture: x64
          # x86 builds are only meaningful for Windows
          - os: windows-latest
            architecture: x86
          - os: macos-latest
            architecture: x64
        python:
          - 3.x
        category:
          - local
# These require credentials.
# Enable them once we sort how to provide them.
#          - integ
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python }}
          architecture: ${{ matrix.platform.architecture }}
      - name: MacOS and Linux setup venv and package
        run: |
          python -m pip install --upgrade pip    
          python -m venv env
          source env/bin/activate
          python -m pip install aws-encryption-sdk-cli
        if: matrix.platform.os != 'windows-latest'
      - name: Windows setup venv and package
        run: |
          python -m pip install --upgrade pip    
          python -m venv env
          .\env\Scripts\activate
          python -m pip install aws-encryption-sdk-cli
        if: matrix.platform.os == 'windows-latest'
      - name: Windows run test
        env:
          TOXENV: ${{ matrix.category }}
        run: |
          .\env\Scripts\activate
          (Get-Command python).Path
          INPUT_TEXT="hello world"
          CIPHERTEXT=$(./examples/bin/encrypt_command_line.sh $INPUT_TEXT $AWS_ENCRYPTION_SDK_PYTHON_INTEGRATION_TEST_AWS_KMS_KEY_ID)
          PLAINTEXT=$(./examples/bin/decrypt_command_line.sh "$CIPHERTEXT" $AWS_ENCRYPTION_SDK_PYTHON_INTEGRATION_TEST_AWS_KMS_KEY_ID)
          python3 -c "assert '$PLAINTEXT' == '$INPUT_TEXT'"
        if: matrix.platform.os == 'windows-latest'
      - name: MacOS Linux run test
        env:
          TOXENV: ${{ matrix.category }}
        run: |
          source env/bin/activate
          which python
          INPUT_TEXT="hello world"
          CIPHERTEXT=$(./examples/bin/encrypt_command_line.sh $INPUT_TEXT $AWS_ENCRYPTION_SDK_PYTHON_INTEGRATION_TEST_AWS_KMS_KEY_ID)
          PLAINTEXT=$(./examples/bin/decrypt_command_line.sh "$CIPHERTEXT" $AWS_ENCRYPTION_SDK_PYTHON_INTEGRATION_TEST_AWS_KMS_KEY_ID)
          python3 -c "assert '$PLAINTEXT' == '$INPUT_TEXT'"
        if: matrix.platform.os != 'windows-latest'
